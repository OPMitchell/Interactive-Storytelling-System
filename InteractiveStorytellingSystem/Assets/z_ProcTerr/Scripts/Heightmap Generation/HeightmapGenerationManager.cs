using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Manager that receives the user's parameter settings and decides which of the 3 terrain generation methods to execute.
/// </summary>
public class HeightmapGenerationManager : MonoBehaviour 
{
	private int chunkSize = 9; //size of terrain height map = (2^chunkSize)+1

	[SerializeField]
	private GenerationMethod terrainGenerationMethod; //enum ID of the terrain generation method to use (see line 32)
	[Range(0,1000)]
	public int terrainHeight; //height of the terrain. Unity scales the heightmap's mesh by this value.
	[Range(0,1)] [SerializeField]
	private float terrainRoughness; //holder exponent of the terrain, but reversed. Nearer to 1 = very rough. Nearer to 0 = very smooth.
	[SerializeField]
	private int terrainSeed; //seed of the terrain heightmap
	[SerializeField]
	private int heatMapSeed; //seed of the temperature map
	[SerializeField] 
	private int rainMapSeed; //seed of the rain map
	[SerializeField]
	private AnimationCurve animationCurve; //mathematical curve to apply to all terrain heightmap values

	//Perlin noise implementation not included in final version
	/*
	[Range(0,2)] [SerializeField]
	private float perlin_Lacunarity;
	[Range(0,1)] [SerializeField]
	private float perlin_Persistance;
	[Range(1,1000)] [SerializeField]
	private float perlin_Scale;
	*/

	//enum for the terrain generation method to use
	public enum GenerationMethod
	{
		MidpointDisplacement = 1,
		DiamondSquare = 2,
		SquareSquare = 3,
		//Perlin = 4 (Not used)
	};
			
	/// <summary>
	/// Returns the animation curve
	/// </summary>
	/// <returns>the animation curve</returns>
	public AnimationCurve GetCurve()
	{
		return animationCurve;
	}

	/// <summary>
	/// Gets the size of the chunk.
	/// </summary>
	/// <returns>The chunk size.</returns>
	public int GetChunkSize()
	{
		return chunkSize;
	}

	/// <summary>
	/// Generates the height map for the terrain.
	/// </summary>
	/// <returns>The height map.</returns>
	/// <param name="offsetX">x-axis offset for terrain generated by noise functions</param>
	/// <param name="offsetY">y-axis offset for terrain generated by noise functions</param>
	public float[,] GenerateHeightMap(float offsetX, float offsetY)
	{
		return Generate (terrainSeed, (int)terrainGenerationMethod, terrainRoughness, offsetX, offsetY);
	}

	/// <summary>
	/// Generates the heat map.
	/// </summary>
	/// <returns>The heat map.</returns>
	/// <param name="offsetX">x-axis offset for terrain generated by noise functions</param>
	/// <param name="offsetY">y-axis offset for terrain generated by noise functions</param>
	/// <param name="newGenerationMethod">Generation method to use for the heatmap</param>
	/// <param name="newRoughness">Roughness to use for the heatmap</param>
	public float[,] GenerateHeatMap(float offsetX, float offsetY, int newGenerationMethod, float newRoughness)
	{
		return Generate (heatMapSeed, newGenerationMethod, newRoughness, offsetX, offsetY);
	}

	/// <summary>
	/// Generates the rain map.
	/// </summary>
	/// <returns>The rain map.</returns>
	/// <param name="offsetX">x-axis offset for terrain generated by noise functions</param>
	/// <param name="offsetY">y-axis offset for terrain generated by noise functions</param>
	/// <param name="newGenerationMethod">Generation method to use for the rain map</param>
	/// <param name="newRoughness">Roughness to use for the rain map</param>
	public float[,] GenerateRainMap(float offsetX, float offsetY, int newGenerationMethod, float newRoughness)
	{
		return Generate (rainMapSeed, newGenerationMethod, newRoughness, offsetX, offsetY);
	}

	/// <summary>
	/// Generates a heightmap by calling the correct generation method with the given parameters
	/// </summary>
	/// <param name="chunkSeed">seed to use for generation</param>
	/// <param name="generationMethod">Generation method to use</param>
	/// <param name="roughness">Roughness/holder exponent of the heightmap</param>
	/// <param name="offsetX">x-axis offset for terrain generated by noise functions</param>
	/// <param name="offsetY">y-axis offset for terrain generated by noise functionsx-axis offset for terrain generated by noise functions</param>
	private float[,] Generate(int chunkSeed, int generationMethod, float roughness, float offsetX, float offsetY)
	{
		float[,] heightMap;
		switch ((int)generationMethod) 
		{
		case 1:
			heightMap = MidpointDisplacement.GenerateHeightMap(chunkSize, chunkSeed, 0.5f, roughness); //midpoint displacement
			break;
		case 2:
			heightMap = DiamondSquare.GenerateHeightMap (chunkSize, chunkSeed, 0.5f, roughness); //diamond square
			break;
		case 3:
			heightMap = SquareSquare.GenerateHeightMap (chunkSize, chunkSeed, roughness); //square square
			break;
		/*
		case 4:
			heightMap = Perlin.GenerateHeightMap (chunkSize, chunkSeed, offsetX, offsetY, perlin_Lacunarity, perlin_Persistance, perlin_Scale);
			break;
		*/
		default:
			heightMap = null; //something went wrong if this case occurs
			Debug.Log("Something went wrong when attempting to create the terrain. Please try again.");
			break;
		}
		return heightMap;
	}
}
